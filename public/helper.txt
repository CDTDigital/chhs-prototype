var ArcgisActiveFire = function() {

    // private variables
    var today = new Date();
    var curyear = today.getFullYear();
    var lastYear = curyear - 1;

    var dynamicApi = 'https://wildfire.cr.usgs.gov/arcgis/rest/services/geomac_dyn/MapServer';
    var definitionUrl = dynamicApi + "?f=pjson";
    var whereClause = 'query?where=state%3D%27ca%27';
    var countOnly = '&returnCountOnly=true&f=pjson';
    var currentFireLayerId = 0;
    var lastYearFireLayerId;

    // private functions
    function lastYearFireCount(){

        $.getJSON( definitionUrl)
        .done(function( data ) {

            //console.log(JSON.stringify(data))
            var tsql = 'SELECT id FROM ? WHERE name ="' + lastYear + ' Fires"'
            var retval = alasql(tsql,[data.layers]); 
            lastYearFireLayerId = retval[0].id;
            //console.log(retval[0].id);

        }).fail(function( jqxhr, textStatus, error ) {
            var err = textStatus + ", " + error;
            console.log( "Request Failed: " + err );
            lastYearFireLayerId = -1;
        });

    }

    function currentFireCount()
    {
        var retval = -1;
        var api = dynamicApi + '/' + currentFireLayerId + '/' + whereClause + countOnly;

        $.ajax({
                url: api,
                dataType: 'json',
                async: false,
                success: function(data) {
                    retval = data.count;
                },
                error:function( jqxhr, textStatus, error ) {
                    var err = textStatus + ", " + error;
                    console.log( "Request Failed: " + err );
                }
        });

        return retval;
        
    }


    // return public members
    return {
        currentFireCount: currentFireCount
    }

   
        

};

{
    return $.getJSON('https://wildfire.cr.usgs.gov/arcgis/rest/services/geomac_dyn/MapServer?f=pjson')
    .then(function(data) {

            var today = new Date();
            var curyear = today.getFullYear();
            var lastYear = curyear - 1;

            var tsql = 'SELECT id FROM ? WHERE name ="' + lastYear + ' Fires"'
            var retval = alasql(tsql,[data.layers]); 
            return retval[0].id;

    }).then(function(id){
        return $.getJSON('https://wildfire.cr.usgs.gov/arcgis/rest/services/geomac_dyn/MapServer/' + id + '/query?where=state%3D%27CA%27&returnCountOnly=true&f=pjson')
            .then(function(data) {
                return data.count;
        });
    }).fail( function(d) {
        console.error("getLastYearFireCount failed, stack: " + d.stack + ", error: "+ d.message)
    });
  }
  
$ git init
$ git remote add git rm -r --cached node_modules/chhs-prototype.git
$ echo "node_modules/" > .gitignore
$ git add .
$ git commit -m "initial commit"
$ git push origin master

function initialize() {
    var map;

    require(["esri/map"], function (Map) {
        map = new Map("map_canvas", {
            basemap: "streets",
            center: [-119.417931, 36.778259],
            zoom: 6
        });
    });
};

git rm -r one-of-the-directories
git commit -m "Remove duplicated directory"
git push origin <your-git-branch> (typically 'master', but not always)

git config --list --show-origin

CORS
http://stackoverflow.com/a/37767179

var arcgisGEMS = {

  api: "https://igems.doi.gov/arcgis/rest/services/igems_haz/MapServer",
  earthquakelayerid: 3,
  wildfirelayerid: 10,
  whereclause: "location+like+%27%25California%27",
  whereclause_layerfix: "location like '%California'",
  whereclause2: "state='CA'",

  isloaded: false,

  getEarthquakeCount: function () {
    var url = '{0}/{1}/query?where={2}&returnCountOnly=true&f=pjson'.format(this.api, this.earthquakelayerid, this.whereclause);
    return $.getJSON(url)
      .then(function (data) {
        return data.count;
      }).fail(function (jqxhr, textstatus) {
        console.error("getEarthquakeCount failed. Error: " + textstatus);
      });
  },

  getWildfireCount: function () {
    var url = '{0}/{1}/query?where={2}&returnCountOnly=true&f=pjson'.format(this.api, this.wildfirelayerid, this.whereclause2);
    return $.getJSON(url)
      .then(function (data) {
        return data.count;
      }).fail(function (jqxhr, textstatus) {
        console.error("getWildfireCount failed. Error: " + textstatus);
      });
  }

};

//TODO: Look into why Earthquakes Last 24 Hours is failing
            case "#tabGEMS":
                if (!arcgisGEMS.isloaded) {
                    $.when(arcgisGEMS.getEarthquakeCount(),arcgisGEMS.getWildfireCount()).done(function (earthquake,wildfire) {

                        addCatalogLink(catalog, arcgisGEMS.api, arcgisGEMS.earthquakelayerid, arcgisGEMS.whereclause_layerfix, 'Earthquakes Last 24 Hours', earthquake);
                        addCatalogLink(catalog, arcgisGEMS.api, arcgisGEMS.wildfirelayerid, arcgisGEMS.whereclause2, 'Active Wildfires', wildfire);

                        arcgisGEMS.isloaded = true;

                    }).fail(function (jsxhr, tetxstatus) {

                    });

                }
                break;


                docker run -p 27017:27017 --name some-mongo -d mongo
                docker ps
                chhs-prototype> docker exec -it some-mongo /bin/sh
                show collections
                db.getName()

